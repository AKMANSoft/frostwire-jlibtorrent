group 'com.frostwire'
version '1.1.0.9'

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    mavenCentral()
}

dependencies {
}

jar {
    archiveName = 'jlibtorrent-' + project.version + '.jar'

    manifest {
        attributes 'Main-Class': 'com.frostwire.jlibtorrent.tools.Main'
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadoc2(type: Javadoc) {
    source = sourceSets.main.allJava
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc2) {
    classifier = 'javadoc'
    from javadoc2.destinationDir
}

task nativeMacOSXJar(type: Zip) {
    destinationDir file("$buildDir/libs")
    baseName 'jlibtorrent-macosx'
    extension 'jar'
    from fileTree(dir: 'swig/bin/macosx', include: '*jlibtorrent.dylib')
    into 'lib/'
}

task nativeWindowsJar(type: Zip) {
    destinationDir file("$buildDir/libs")
    baseName 'jlibtorrent-windows'
    extension 'jar'
    from fileTree(dir: 'swig/bin/windows', include: '**/*jlibtorrent.dll')
    into 'lib/'
}

task nativeLinuxJar(type: Zip) {
    destinationDir file("$buildDir/libs")
    baseName 'jlibtorrent-linux'
    extension 'jar'
    from fileTree(dir: 'swig/bin/linux/', include: '**/*jlibtorrent.so')
    into 'lib/'
}

task nativeAndroidJar(type: Zip) {
    destinationDir file("$buildDir/libs")
    baseName 'jlibtorrent-android'
    extension 'jar'
    from fileTree(dir: 'swig/bin/android', excludes: ['**/ed25519', '**/src'], include: '**/*jlibtorrent.so')
    into 'lib/'
}

// signature tasks
task signJar(type: Sign) {
    sign jar
}

def getJarSignature = {
    return project.tasks.signJar.signatureFiles.collect { it }[0]
}

task signSourcesJar(type: Sign) {
    sign sourcesJar
}

def getSourcesJarSignature = {
    return project.tasks.signSourcesJar.signatureFiles.collect { it }[0]
}

task signJavadocJar(type: Sign) {
    sign javadocJar
}

def getJavadocJarSignature = {
    return project.tasks.signJavadocJar.signatureFiles.collect { it }[0]
}

task signNativeMacOSXJar(type: Sign) {
    sign nativeMacOSXJar
}

def getNativeMacOSXJarSignature = {
    return project.tasks.signNativeMacOSXJar.signatureFiles.collect { it }[0]
}

task signNativeWindowsJar(type: Sign) {
    sign nativeWindowsJar
}

def getNativeWindowsJarSignature = {
    return project.tasks.signNativeWindowsJar.signatureFiles.collect { it }[0]
}

task signNativeLinuxJar(type: Sign) {
    sign nativeLinuxJar
}

def getNativeLinuxJarSignature = {
    return project.tasks.signNativeLinuxJar.signatureFiles.collect { it }[0]
}

task signNativeAndroidJar(type: Sign) {
    sign nativeAndroidJar
}

def getNativeAndroidJarSignature = {
    return project.tasks.signNativeAndroidJar.signatureFiles.collect { it }[0]
}

task signJarPom(type: Sign) {
    outputs.upToDateWhen { false }
    def f = new File("$buildDir/publications/maven/pom-default.xml")
    if (f.exists()) {
        sign(f)
    }
}

def getJarPomSignature = {
    def f = new File("$buildDir/publications/maven/pom-default.xml.asc")
    return f.exists() ? f : null
}

task signNativeMacOSXPom(type: Sign) {
    outputs.upToDateWhen { false }
    def f = new File("$buildDir/publications/nativeMacOSX/pom-default.xml")
    if (f.exists()) {
        sign(f)
    }
}

def getNativeMacOSXPomSignature = {
    def f = new File("$buildDir/publications/nativeMacOSX/pom-default.xml.asc")
    return f.exists() ? f : null
}

task signNativeWindowsPom(type: Sign) {
    outputs.upToDateWhen { false }
    def f = new File("$buildDir/publications/nativeWindows/pom-default.xml")
    if (f.exists()) {
        sign(f)
    }
}

def getNativeWindowsPomSignature = {
    def f = new File("$buildDir/publications/nativeWindows/pom-default.xml.asc")
    return f.exists() ? f : null
}

task signNativeLinuxPom(type: Sign) {
    outputs.upToDateWhen { false }
    def f = new File("$buildDir/publications/nativeLinux/pom-default.xml")
    if (f.exists()) {
        sign(f)
    }
}

def getNativeLinuxPomSignature = {
    def f = new File("$buildDir/publications/nativeLinux/pom-default.xml.asc")
    return f.exists() ? f : null
}

task signNativeAndroidPom(type: Sign) {
    outputs.upToDateWhen { false }
    def f = new File("$buildDir/publications/nativeAndroid/pom-default.xml")
    if (f.exists()) {
        sign(f)
    }
}

def getNativeAndroidPomSignature = {
    def f = new File("$buildDir/publications/nativeAndroid/pom-default.xml.asc")
    return f.exists() ? f : null
}

// end signature tasks

tasks.whenTaskAdded {
    if (it.name.startsWith('generatePomFileForMavenPublication')) it.dependsOn(['signJarPom',
                                                                                'signNativeMacOSXPom',
                                                                                'signNativeWindowsPom',
                                                                                'signNativeLinuxPom',
                                                                                'signNativeAndroidPom'])

    if (it.name.startsWith('publish')) it.dependsOn(['jar', 'nativeAndroidJar',
                                                     'signJar', 'signSourcesJar', 'signJavadocJar',
                                                     'signNativeMacOSXJar',
                                                     'signNativeWindowsJar',
                                                     'signNativeLinuxJar',
                                                     'signNativeAndroidJar'])
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent'
            version project.version

            from components.java

            artifacts = [jar, sourcesJar, javadocJar]

            artifact(getJarSignature()) {
                classifier null
                extension 'jar.asc'
            }
            artifact(getSourcesJarSignature()) {
                classifier 'sources'
                extension 'jar.asc'
            }
            artifact(getJavadocJarSignature()) {
                classifier 'javadoc'
                extension 'jar.asc'
            }
            if (getJarPomSignature() != null) {
                artifact(getJarPomSignature()) {
                    classifier null
                    extension 'pom.asc'
                }
            }

            pom.withXml {
                asNode().children().last() + pomData()
            }
        }
        nativeMacOSX(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent-macosx'
            version project.version

            artifact nativeMacOSXJar

            artifact(getNativeMacOSXJarSignature()) {
                classifier null
                extension 'jar.asc'
            }
            if (getNativeMacOSXPomSignature() != null) {
                artifact(getNativeMacOSXPomSignature()) {
                    classifier null
                    extension 'pom.asc'
                }
            }

            pom.withXml {
                asNode().children().last() + pomData()
            }
        }
        nativeWindows(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent-windows'
            version project.version

            artifact nativeWindowsJar

            artifact(getNativeWindowsJarSignature()) {
                classifier null
                extension 'jar.asc'
            }
            if (getNativeWindowsPomSignature() != null) {
                artifact(getNativeWindowsPomSignature()) {
                    classifier null
                    extension 'pom.asc'
                }
            }

            pom.withXml {
                asNode().children().last() + pomData()
            }
        }
        nativeLinux(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent-linux'
            version project.version

            artifact nativeLinuxJar

            artifact(getNativeLinuxJarSignature()) {
                classifier null
                extension 'jar.asc'
            }
            if (getNativeLinuxPomSignature() != null) {
                artifact(getNativeLinuxPomSignature()) {
                    classifier null
                    extension 'pom.asc'
                }
            }

            pom.withXml {
                asNode().children().last() + pomData()
            }
        }
        nativeAndroid(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent-android'
            version project.version

            artifact nativeAndroidJar

            artifact(getNativeAndroidJarSignature()) {
                classifier null
                extension 'jar.asc'
            }
            if (getNativeAndroidPomSignature() != null) {
                artifact(getNativeAndroidPomSignature()) {
                    classifier null
                    extension 'pom.asc'
                }
            }

            pom.withXml {
                asNode().children().last() + pomData()
            }
        }
    }

    repositories {
        maven {
            if (new File("$buildDir/com/frostwire/jlibtorrent/${project.version}/jlibtorrent-${project.version}.pom.asc").exists()) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            } else {
                url "$buildDir"
            }
        }
    }
}

def pomData() {
    return {
        resolveStrategy = Closure.DELEGATE_FIRST
        name 'frostwire-jlibtorrent'
        description 'A swig Java interface for libtorrent by the makers of FrostWire.'
        url 'https://github.com/frostwire/frostwire-jlibtorrent'
        scm {
            connection 'scm:git:git://github.com/frostwire/frostwire-jlibtorrent.git'
            developerConnection 'scm:git:ssh:git@github.com/frostwire/frostwire-jlibtorrent.git'
            url 'https://github.com/frostwire/frostwire-jlibtorrent'
        }
        licenses {
            license {
                name 'The MIT License'
                url 'https://github.com/frostwire/frostwire-jlibtorrent/blob/master/LICENSE.md'
            }
        }
        developers {
            developer {
                id 'gubatron'
                name 'Angel Leon'
                email 'gubatron@gmail.com'
            }
            developer {
                id 'aldenml'
                name 'Alden Torres'
                email 'aldenml@gmail.com'
            }
        }
    }
}
