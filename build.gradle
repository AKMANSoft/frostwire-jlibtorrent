group 'com.frostwire'
version '1.1.0.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    mavenCentral()
}

dependencies {
}

jar {
    archiveName = 'jlibtorrent-' + project.version + '.jar'

    manifest {
        attributes 'Main-Class': 'com.frostwire.jlibtorrent.tools.Main'
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadoc2(type: Javadoc) {
    source = sourceSets.main.allJava
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc2) {
    classifier = 'javadoc'
    from javadoc2.destinationDir
}

task nativeAndroidJar(type: Zip) {
    destinationDir file("$buildDir/libs")
    baseName 'jlibtorrent-android'
    extension 'jar'
    from fileTree(dir: 'binaries/android', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeAndroidJar)
}

artifacts {
    archives sourcesJar, javadocJar, nativeAndroidJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent'
            version project.version

            from components.java
        }
        mavenSources(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent'
            version project.version

            artifact sourcesJar
        }
        mavenJavadoc(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent'
            version project.version

            artifact javadocJar
        }
        nativeAndroid(MavenPublication) {
            groupId project.group
            artifactId 'jlibtorrent-android'
            version project.version

            artifact nativeAndroidJar
        }
    }

    repositories {
        maven {
            url 'repo'
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for
        // a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build." +
                "\n\nPlease enter your signing details.\n\n"

        def id = console.readLine("PGP Key Id: ")
        def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}
