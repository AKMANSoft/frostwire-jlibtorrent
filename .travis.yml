language: java

matrix:
  include:
    - env: os_build=android os_arch=arm android_api=16 android_abi=armeabi-v7a
    - env: os_build=android os_arch=arm64 android_api=21 android_abi=arm64-v8a
    - env: os_build=android os_arch=x86 android_api=16 android_abi=x86
    - env: os_build=android os_arch=x86_64 android_api=21 android_abi=x86_64
#    - dist: trusty
#      env: os_build=linux os_arch=x86
#    - dist: trusty
#      env: os_build=linux os_arch=x86_64
#    - dist: trusty
#      env: os_build=linux os_arch=arm
#    - dist: trusty
#      env: os_build=linux os_arch=arm64
#    - dist: trusty
#      env: os_build=windows os_arch=x86
#    - dist: trusty
#      env: os_build=windows os_arch=x86_64
#    - os: osx
#      env: os_build=macosx os_arch=x86_64

branches:
  only:
    - master

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

before_install:
# gradle: download and setup path
  - wget -O gradle-bin.zip https://services.gradle.org/distributions/gradle-2.14-bin.zip
  - unzip -qq gradle-bin.zip
  - export GRADLE_HOME=$PWD/gradle-2.14
  - export PATH=$GRADLE_HOME/bin:$PATH

# boost: download and bootstrap
  - wget -O boost.zip http://pilotfiber.dl.sourceforge.net/project/boost/boost/1.61.0/boost_1_61_0.zip
  - unzip -qq boost.zip
  - cd boost_1_61_0
  - ./bootstrap.sh
  - cd ..
  - export BOOST_ROOT=$PWD/boost_1_61_0

# openssl: download and checkout revision
  - git clone https://github.com/openssl/openssl openssl-src
  - cd openssl-src
  - git checkout 6b4a77f56e14c002ce3cf960f622682be3b8424b
  - cd ..
  - export OPENSSL_SOURCE=$PWD/openssl-src
  # fix source code
  - sed -i 's/.comm	OPENSSL_armcap_P,4,4/.comm	OPENSSL_armcap_P,4,4\n.hidden OPENSSL_armcap_P/g' $OPENSSL_SOURCE/crypto/sha/asm/sha1-armv4-large.pl
  - sed -i 's/.comm	OPENSSL_armcap_P,4,4/.comm	OPENSSL_armcap_P,4,4\n.hidden OPENSSL_armcap_P/g' $OPENSSL_SOURCE/crypto/sha/asm/sha256-armv4.pl
  - sed -i 's/.comm	OPENSSL_armcap_P,4,4/.comm	OPENSSL_armcap_P,4,4\n.hidden OPENSSL_armcap_P/g' $OPENSSL_SOURCE/crypto/sha/asm/sha512-armv4.pl
  - sed -i 's/\$code.*//g' $OPENSSL_SOURCE/crypto/aes/asm/aesv8-armx.pl
  - sed -i 's/.arch.*crypto//g' $OPENSSL_SOURCE/crypto/arm64cpuid.pl
  - sed -i 's/.arch.*crypto//g' $OPENSSL_SOURCE/crypto/modes/asm/ghashv8-armx.pl
  - sed -i 's/if !defined(OPENSSL_SYS_WINCE) && !defined(OPENSSL_SYS_WIN32_CYGWIN)/if 0/g' $OPENSSL_SOURCE/crypto/rand/rand_win.c

# libtorrent: download and checkout revision
  - git clone https://github.com/aldenml/libtorrent
  - cd libtorrent
  - git checkout 0c293cf032a3bb543a41b82dfd66afdeae219074
  - cd ..
  - export LIBTORRENT_ROOT=$PWD/libtorrent

# android ndk: download and create toolchain
  - if [[ $os_build == "android" ]]; then
      wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip;
      echo "Extracting NDK...wait";
      unzip -qq android-ndk.zip;
      export NDK=$PWD/android-ndk-r12b;
      $NDK/build/tools/make_standalone_toolchain.py --arch $os_arch --api $android_api --stl libc++ --install-dir android-toolchain;
      export ANDROID_TOOLCHAIN=$PWD/android-toolchain;
    fi

# linux multilib packages for 32 bit development
  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
    sudo apt-get install -qq gcc-5-multilib g++-5-multilib;
    fi

# linux packages for 64 bit
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
    sudo apt-get install -qq gcc-5 g++-5;
    fi

# linux arm packages
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
    sudo apt-get install -qq gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf;
    fi

# linux arm64 packages
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
    sudo apt-get install -qq gcc-aarch64-linux-gnu g++-aarch64-linux-gnu;
    fi

# linux cross compilation tools for windows development
# remove files related to libwinpthread dll
  - if [[ $os_build == "windows" ]]; then
    sudo apt-get install -qq mingw-w64;
    sudo rm /usr/i686-w64-mingw32/lib/libwinpthread.dll.a;
    sudo rm /usr/i686-w64-mingw32/lib/libwinpthread-1.dll;
    sudo rm /usr/x86_64-w64-mingw32/lib/libwinpthread.dll.a;
    sudo rm /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll;
    fi

# openssl build
  - cd $OPENSSL_SOURCE
  - export OPENSSL_NO_OTS="no-afalgeng no-asan no-async no-autoalginit no-autoerrinit no-bf no-blake2 no-camellia no-capieng no-cast no-chacha no-cmac no-cms no-comp no-crypto-mdebug no-crypto-mdebug-backtrace no-ct no-deprecated no-des no-dgram no-dh no-dsa no-dso no-dtls no-dynamic-engine no-ec no-ec2m no-ecdh no-ecdsa no-ec_nistp_64_gcc_128 no-egd no-engine no-err no-filenames no-fuzz-libfuzzer no-fuzz-afl no-gost no-heartbeats no-hw no-idea no-makedepend no-md2 no-md4 no-mdc2 no-multiblock no-nextprotoneg no-ocb no-ocsp no-pic no-poly1305 no-posix-io no-psk no-rc2 no-rc4 no-rc5 no-rdrand no-rfc3779 no-rmd160 no-scrypt no-sctp no-seed no-shared no-sock no-srp no-srtp no-ssl no-ssl-trace no-static-engine no-stdio no-threads no-tls no-ts no-ubsan no-ui no-unit-test no-whirlpool no-weak-ssl-ciphers no-zlib no-zlib-dynamic"
  # android-arm
  - if [[ $os_build == "android" && $os_arch == "arm" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/arm-linux-androideabi-clang;
      ./Configure linux-armv4 $OPENSSL_NO_OTS -march=armv7-a -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # android-arm64
  - if [[ $os_build == "android" && $os_arch == "arm64" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/aarch64-linux-android-clang;
      ./Configure linux-aarch64 $OPENSSL_NO_OTS -march=armv8-a+crypto -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # android-x86
  - if [[ $os_build == "android" && $os_arch == "x86" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/i686-linux-android-clang;
      ./Configure linux-elf $OPENSSL_NO_OTS -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # android-x86_64
  - if [[ $os_build == "android" && $os_arch == "x86_64" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/x86_64-linux-android-clang;
      ./Configure linux-x86_64 $OPENSSL_NO_OTS -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # linux-x86
  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
    ./Configure linux-elf -fPIC -m32 --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # linux-x86_64
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
    ./Configure linux-x86_64 -fPIC --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # linux-arm
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
    export CC=arm-linux-gnueabihf-gcc;
    ./Configure linux-armv4 -fPIC --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # linux-arm64
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
    export CC=aarch64-linux-gnu-gcc;
    ./Configure linux-aarch64 -fPIC --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # windows-x86
  - if [[ $os_build == "windows" && $os_arch == "x86" ]]; then
    export CC=i686-w64-mingw32-gcc;
    ./Configure mingw --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # windows-x86_64
  - if [[ $os_build == "windows" && $os_arch == "x86_64" ]]; then
    export CC=x86_64-w64-mingw32-gcc;
    ./Configure mingw64 --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  # macosx
  - if [[ $os_build == "macosx" ]]; then
    ./Configure darwin64-x86_64-cc --prefix=$OPENSSL_SOURCE/../openssl;
    fi
  - make
  - make install > /dev/null
  - cd ..
  - export OPENSSL_ROOT=$PWD/openssl

# jlibtorrent native build
  - cd swig
  # android-arm
  - if [[ $os_build == "android" && $os_arch == "arm" ]]; then
      $BOOST_ROOT/b2 --user-config=config/android-arm-config.jam toolset=clang-arm target-os=android location=bin/android/armeabi-v7a;
      $ANDROID_TOOLCHAIN/bin/arm-linux-androideabi-strip --strip-unneeded -x bin/android/armeabi-v7a/libjlibtorrent.so;
      $ANDROID_TOOLCHAIN/bin/arm-linux-androideabi-readelf -d bin/android/armeabi-v7a/libjlibtorrent.so;
    fi
  # android-arm64
  - if [[ $os_build == "android" && $os_arch == "arm64" ]]; then
      $BOOST_ROOT/b2 --user-config=config/android-arm64-config.jam toolset=clang-arm64 target-os=linux location=bin/android/arm64-v8a;
      $ANDROID_TOOLCHAIN/bin/aarch64-linux-android-strip --strip-unneeded -x bin/android/arm64-v8a/libjlibtorrent.so;
      $ANDROID_TOOLCHAIN/bin/aarch64-linux-android-readelf -d bin/android/arm64-v8a/libjlibtorrent.so;
    fi
  # android-x86
  - if [[ $os_build == "android" && $os_arch == "x86" ]]; then
      $BOOST_ROOT/b2 --user-config=config/android-x86-config.jam toolset=clang-x86 target-os=linux location=bin/android/x86;
      $ANDROID_TOOLCHAIN/bin/i686-linux-android-strip --strip-unneeded -x bin/android/x86/libjlibtorrent.so;
      $ANDROID_TOOLCHAIN/bin/i686-linux-android-readelf -d bin/android/x86/libjlibtorrent.so;
    fi
  # android-x86_64
  - if [[ $os_build == "android" && $os_arch == "x86_64" ]]; then
      $BOOST_ROOT/b2 --user-config=config/android-x86_64-config.jam toolset=clang-x86_64 target-os=linux location=bin/android/x86_64;
      $ANDROID_TOOLCHAIN/bin/x86_64-linux-android-strip --strip-unneeded -x bin/android/x86_64/libjlibtorrent.so;
      $ANDROID_TOOLCHAIN/bin/x86_64-linux-android-readelf -d bin/android/x86_64/libjlibtorrent.so;
    fi
  # linux-x86
  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
    $BOOST_ROOT/b2 --user-config=config/linux-x86-config.jam toolset=gcc-x86 target-os=linux location=bin/linux/x86;
    strip --strip-unneeded -x bin/linux/x86/libjlibtorrent.so;
    fi
  # linux-x86_64
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
    $BOOST_ROOT/b2 --user-config=config/linux-x86_64-config.jam toolset=gcc-x86_64 target-os=linux location=bin/linux/x86_64;
    strip --strip-unneeded -x bin/linux/x86_64/libjlibtorrent.so;
    fi
  # linux-arm
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
    $BOOST_ROOT/b2 --user-config=config/linux-arm-config.jam toolset=gcc-arm target-os=linux location=bin/linux/arm;
    arm-linux-gnueabihf-strip --strip-unneeded -x bin/linux/arm/libjlibtorrent.so;
    fi
  # linux-arm64
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
    $BOOST_ROOT/b2 --user-config=config/linux-arm64-config.jam toolset=gcc-arm64 target-os=linux location=bin/linux/arm64;
    aarch64-linux-gnu-strip --strip-unneeded -x bin/linux/arm64/libjlibtorrent.so;
    fi
  # windows-x86
  - if [[ $os_build == "windows" && $os_arch == "x86" ]]; then
    sed -i 's/ JNICALL Java_com_frostwire/ JNICALL _Java_com_frostwire/g' libtorrent_jni.cpp;
    $BOOST_ROOT/b2 --user-config=config/windows-x86-config.jam toolset=gcc-x86 target-os=windows location=bin/windows/x86;
    i686-w64-mingw32-strip --strip-unneeded -x bin/windows/x86/libjlibtorrent.dll;
    mv bin/windows/x86/libjlibtorrent.dll bin/windows/x86/jlibtorrent.dll;
    fi
  # windows-x86_64
  - if [[ $os_build == "windows" && $os_arch == "x86_64" ]]; then
    $BOOST_ROOT/b2 --user-config=config/windows-x86_64-config.jam toolset=gcc-x86_64 target-os=windows location=bin/windows/x86_64;
    x86_64-w64-mingw32-strip --strip-unneeded -x bin/windows/x86_64/libjlibtorrent.dll;
    mv bin/windows/x86_64/libjlibtorrent.dll bin/windows/x86_64/jlibtorrent.dll;
    fi
  # macosx
  - if [[ $os_build == "macosx" ]]; then
    $BOOST_ROOT/b2 --user-config=config/macosx-x86_64-config.jam toolset=darwin-x86_64 target-os=darwin location=bin/macosx/x86_64;
    strip -S -x bin/macosx/x86_64/libjlibtorrent.dylib;
    fi
  - cd ..

# copy binaries for testing
  # android
  - if [[ $os_build == "android" ]]; then
      mkdir -p android/src/main/jniLibs;
      cp -R swig/bin/android/$android_abi android/src/main/jniLibs;
    fi
  # linux
  - if [[ $os_build == "linux" ]]; then
      cp swig/bin/linux/$os_arch/*.so .;
    fi
  # macosx
  - if [[ $os_build == "macosx" ]]; then
      cp swig/bin/macosx/$os_arch/*.dylib .;
    fi

script:
  # run gradle test for linux
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then gradle test; fi
  # run gradle test for macosx
  - if [[ $os_build == "macosx" ]]; then gradle test; fi

before_deploy:
  - cd swig/bin
  - find . -type f | egrep -v '.*\.so$|.*\.dll$|.*\.dylib$' | xargs rm
  - find . -empty -type d | xargs rm -r
  - cd ../..

deploy:
  provider: s3
  access_key_id: $S3_ACCESS_KEY
  secret_access_key: $S3_SECRET_KEY
  bucket: $S3_BUCKET
  skip_cleanup: true
  local_dir: swig/bin
  on:
    all_branches: true
