/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public enum http_errors {
  cont(libtorrent_jni.cont_get()),
  ok(libtorrent_jni.ok_get()),
  created(libtorrent_jni.created_get()),
  accepted(libtorrent_jni.accepted_get()),
  no_content(libtorrent_jni.no_content_get()),
  multiple_choices(libtorrent_jni.multiple_choices_get()),
  moved_permanently(libtorrent_jni.moved_permanently_get()),
  moved_temporarily(libtorrent_jni.moved_temporarily_get()),
  not_modified(libtorrent_jni.not_modified_get()),
  bad_request(libtorrent_jni.bad_request_get()),
  unauthorized(libtorrent_jni.unauthorized_get()),
  forbidden(libtorrent_jni.forbidden_get()),
  not_found(libtorrent_jni.not_found_get()),
  internal_server_error(libtorrent_jni.internal_server_error_get()),
  not_implemented(libtorrent_jni.not_implemented_get()),
  bad_gateway(libtorrent_jni.bad_gateway_get()),
  service_unavailable(libtorrent_jni.service_unavailable_get());

  public final int swigValue() {
    return swigValue;
  }

  public static http_errors swigToEnum(int swigValue) {
    http_errors[] swigValues = http_errors.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (http_errors swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + http_errors.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private http_errors() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private http_errors(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private http_errors(http_errors swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

