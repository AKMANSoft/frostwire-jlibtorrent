/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class default_storage extends storage_interface {
  private long swigCPtr;

  protected default_storage(long cPtr, boolean cMemoryOwn) {
    super(libtorrent_jni.default_storage_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(default_storage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_default_storage(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public default_storage(file_storage fs, file_storage mapped, String path, file_pool fp, unsigned_char_vector file_prio) {
    this(libtorrent_jni.new_default_storage(file_storage.getCPtr(fs), fs, file_storage.getCPtr(mapped), mapped, path, file_pool.getCPtr(fp), fp, unsigned_char_vector.getCPtr(file_prio), file_prio), true);
  }

  public void set_file_priority(unsigned_char_vector prio) {
    libtorrent_jni.default_storage_set_file_priority(swigCPtr, this, unsigned_char_vector.getCPtr(prio), prio);
  }

  public boolean has_any_file() {
    return libtorrent_jni.default_storage_has_any_file(swigCPtr, this);
  }

  public boolean rename_file(int index, String new_filename) {
    return libtorrent_jni.default_storage_rename_file(swigCPtr, this, index, new_filename);
  }

  public boolean release_files() {
    return libtorrent_jni.default_storage_release_files(swigCPtr, this);
  }

  public boolean delete_files() {
    return libtorrent_jni.default_storage_delete_files(swigCPtr, this);
  }

  public boolean initialize(boolean allocate_files) {
    return libtorrent_jni.default_storage_initialize(swigCPtr, this, allocate_files);
  }

  public int move_storage(String save_path, int flags) {
    return libtorrent_jni.default_storage_move_storage(swigCPtr, this, save_path, flags);
  }

  public int read(String buf, int slot, int offset, int size) {
    return libtorrent_jni.default_storage_read(swigCPtr, this, buf, slot, offset, size);
  }

  public int write(String buf, int slot, int offset, int size) {
    return libtorrent_jni.default_storage_write(swigCPtr, this, buf, slot, offset, size);
  }

  public int sparse_end(int start) {
    return libtorrent_jni.default_storage_sparse_end(swigCPtr, this, start);
  }

  public void hint_read(int slot, int offset, int len) {
    libtorrent_jni.default_storage_hint_read(swigCPtr, this, slot, offset, len);
  }

  public long physical_offset(int slot, int offset) {
    return libtorrent_jni.default_storage_physical_offset(swigCPtr, this, slot, offset);
  }

  public boolean move_slot(int src_slot, int dst_slot) {
    return libtorrent_jni.default_storage_move_slot(swigCPtr, this, src_slot, dst_slot);
  }

  public boolean swap_slots(int slot1, int slot2) {
    return libtorrent_jni.default_storage_swap_slots(swigCPtr, this, slot1, slot2);
  }

  public boolean swap_slots3(int slot1, int slot2, int slot3) {
    return libtorrent_jni.default_storage_swap_slots3(swigCPtr, this, slot1, slot2, slot3);
  }

  public boolean verify_resume_data(lazy_entry rd, error_code error) {
    return libtorrent_jni.default_storage_verify_resume_data(swigCPtr, this, lazy_entry.getCPtr(rd), rd, error_code.getCPtr(error), error);
  }

  public boolean write_resume_data(entry rd) {
    return libtorrent_jni.default_storage_write_resume_data(swigCPtr, this, entry.getCPtr(rd), rd);
  }

  public file_storage files() {
    return new file_storage(libtorrent_jni.default_storage_files(swigCPtr, this), false);
  }

}
