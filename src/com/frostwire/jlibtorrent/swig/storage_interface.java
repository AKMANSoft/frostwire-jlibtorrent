/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class storage_interface {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected storage_interface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(storage_interface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_storage_interface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean initialize(boolean allocate_files) {
    return libtorrent_jni.storage_interface_initialize(swigCPtr, this, allocate_files);
  }

  public boolean has_any_file() {
    return libtorrent_jni.storage_interface_has_any_file(swigCPtr, this);
  }

  public void set_file_priority(unsigned_char_vector prio) {
    libtorrent_jni.storage_interface_set_file_priority(swigCPtr, this, unsigned_char_vector.getCPtr(prio), prio);
  }

  public int readv(SWIGTYPE_p_file__iovec_t bufs, int slot, int offset, int num_bufs, int flags) {
    return libtorrent_jni.storage_interface_readv__SWIG_0(swigCPtr, this, SWIGTYPE_p_file__iovec_t.getCPtr(bufs), slot, offset, num_bufs, flags);
  }

  public int readv(SWIGTYPE_p_file__iovec_t bufs, int slot, int offset, int num_bufs) {
    return libtorrent_jni.storage_interface_readv__SWIG_1(swigCPtr, this, SWIGTYPE_p_file__iovec_t.getCPtr(bufs), slot, offset, num_bufs);
  }

  public int writev(SWIGTYPE_p_file__iovec_t bufs, int slot, int offset, int num_bufs, int flags) {
    return libtorrent_jni.storage_interface_writev__SWIG_0(swigCPtr, this, SWIGTYPE_p_file__iovec_t.getCPtr(bufs), slot, offset, num_bufs, flags);
  }

  public int writev(SWIGTYPE_p_file__iovec_t bufs, int slot, int offset, int num_bufs) {
    return libtorrent_jni.storage_interface_writev__SWIG_1(swigCPtr, this, SWIGTYPE_p_file__iovec_t.getCPtr(bufs), slot, offset, num_bufs);
  }

  public void hint_read(int arg0, int arg1, int arg2) {
    libtorrent_jni.storage_interface_hint_read(swigCPtr, this, arg0, arg1, arg2);
  }

  public int read(String buf, int slot, int offset, int size) {
    return libtorrent_jni.storage_interface_read(swigCPtr, this, buf, slot, offset, size);
  }

  public int write(String buf, int slot, int offset, int size) {
    return libtorrent_jni.storage_interface_write(swigCPtr, this, buf, slot, offset, size);
  }

  public long physical_offset(int slot, int offset) {
    return libtorrent_jni.storage_interface_physical_offset(swigCPtr, this, slot, offset);
  }

  public int sparse_end(int start) {
    return libtorrent_jni.storage_interface_sparse_end(swigCPtr, this, start);
  }

  public int move_storage(String save_path, int flags) {
    return libtorrent_jni.storage_interface_move_storage(swigCPtr, this, save_path, flags);
  }

  public boolean verify_resume_data(lazy_entry rd, error_code error) {
    return libtorrent_jni.storage_interface_verify_resume_data(swigCPtr, this, lazy_entry.getCPtr(rd), rd, error_code.getCPtr(error), error);
  }

  public boolean write_resume_data(entry rd) {
    return libtorrent_jni.storage_interface_write_resume_data(swigCPtr, this, entry.getCPtr(rd), rd);
  }

  public boolean move_slot(int src_slot, int dst_slot) {
    return libtorrent_jni.storage_interface_move_slot(swigCPtr, this, src_slot, dst_slot);
  }

  public boolean swap_slots(int slot1, int slot2) {
    return libtorrent_jni.storage_interface_swap_slots(swigCPtr, this, slot1, slot2);
  }

  public boolean swap_slots3(int slot1, int slot2, int slot3) {
    return libtorrent_jni.storage_interface_swap_slots3(swigCPtr, this, slot1, slot2, slot3);
  }

  public boolean release_files() {
    return libtorrent_jni.storage_interface_release_files(swigCPtr, this);
  }

  public boolean rename_file(int index, String new_filename) {
    return libtorrent_jni.storage_interface_rename_file(swigCPtr, this, index, new_filename);
  }

  public boolean delete_files() {
    return libtorrent_jni.storage_interface_delete_files(swigCPtr, this);
  }

  public disk_buffer_pool disk_pool() {
    long cPtr = libtorrent_jni.storage_interface_disk_pool(swigCPtr, this);
    return (cPtr == 0) ? null : new disk_buffer_pool(cPtr, false);
  }

  public session_settings settings() {
    return new session_settings(libtorrent_jni.storage_interface_settings(swigCPtr, this), false);
  }

  public void set_error(String file, error_code ec) {
    libtorrent_jni.storage_interface_set_error(swigCPtr, this, file, error_code.getCPtr(ec), ec);
  }

  public error_code error() {
    return new error_code(libtorrent_jni.storage_interface_error(swigCPtr, this), false);
  }

  public String error_file() {
    return libtorrent_jni.storage_interface_error_file(swigCPtr, this);
  }

  public void clear_error() {
    libtorrent_jni.storage_interface_clear_error(swigCPtr, this);
  }

  public void setM_error(error_code value) {
    libtorrent_jni.storage_interface_m_error_set(swigCPtr, this, error_code.getCPtr(value), value);
  }

  public error_code getM_error() {
    long cPtr = libtorrent_jni.storage_interface_m_error_get(swigCPtr, this);
    return (cPtr == 0) ? null : new error_code(cPtr, false);
  }

  public void setM_error_file(String value) {
    libtorrent_jni.storage_interface_m_error_file_set(swigCPtr, this, value);
  }

  public String getM_error_file() {
    return libtorrent_jni.storage_interface_m_error_file_get(swigCPtr, this);
  }

  public void setM_disk_pool(disk_buffer_pool value) {
    libtorrent_jni.storage_interface_m_disk_pool_set(swigCPtr, this, disk_buffer_pool.getCPtr(value), value);
  }

  public disk_buffer_pool getM_disk_pool() {
    long cPtr = libtorrent_jni.storage_interface_m_disk_pool_get(swigCPtr, this);
    return (cPtr == 0) ? null : new disk_buffer_pool(cPtr, false);
  }

  public void setM_settings(session_settings value) {
    libtorrent_jni.storage_interface_m_settings_set(swigCPtr, this, session_settings.getCPtr(value), value);
  }

  public session_settings getM_settings() {
    long cPtr = libtorrent_jni.storage_interface_m_settings_get(swigCPtr, this);
    return (cPtr == 0) ? null : new session_settings(cPtr, false);
  }

}
