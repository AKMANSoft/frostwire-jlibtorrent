/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class dht_storage_interface {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected dht_storage_interface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(dht_storage_interface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_dht_storage_interface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean get_peers(sha1_hash info_hash, boolean noseed, boolean scrape, entry peers) {
    return libtorrent_jni.dht_storage_interface_get_peers(swigCPtr, this, sha1_hash.getCPtr(info_hash), info_hash, noseed, scrape, entry.getCPtr(peers), peers);
  }

  public void announce_peer(sha1_hash info_hash, tcp_endpoint endp, String name, boolean seed) {
    libtorrent_jni.dht_storage_interface_announce_peer(swigCPtr, this, sha1_hash.getCPtr(info_hash), info_hash, tcp_endpoint.getCPtr(endp), endp, name, seed);
  }

  public boolean get_immutable_item(sha1_hash target, entry item) {
    return libtorrent_jni.dht_storage_interface_get_immutable_item(swigCPtr, this, sha1_hash.getCPtr(target), target, entry.getCPtr(item), item);
  }

  public void put_immutable_item(sha1_hash target, String buf, int size, address addr) {
    libtorrent_jni.dht_storage_interface_put_immutable_item(swigCPtr, this, sha1_hash.getCPtr(target), target, buf, size, address.getCPtr(addr), addr);
  }

  public boolean get_mutable_item(sha1_hash target, long seq, boolean force_fill, entry item) {
    return libtorrent_jni.dht_storage_interface_get_mutable_item(swigCPtr, this, sha1_hash.getCPtr(target), target, seq, force_fill, entry.getCPtr(item), item);
  }

  public void put_mutable_item(sha1_hash target, String buf, int size, String sig, long seq, String pk, String salt, int salt_size, address addr) {
    libtorrent_jni.dht_storage_interface_put_mutable_item(swigCPtr, this, sha1_hash.getCPtr(target), target, buf, size, sig, seq, pk, salt, salt_size, address.getCPtr(addr), addr);
  }

  public void tick() {
    libtorrent_jni.dht_storage_interface_tick(swigCPtr, this);
  }

  public dht_storage_counters counters() {
    return new dht_storage_counters(libtorrent_jni.dht_storage_interface_counters(swigCPtr, this), true);
  }

}
