/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public final class http_errors {
  public final static http_errors cont = new http_errors("cont", 100);
  public final static http_errors ok = new http_errors("ok", 200);
  public final static http_errors created = new http_errors("created", 201);
  public final static http_errors accepted = new http_errors("accepted", 202);
  public final static http_errors no_content = new http_errors("no_content", 204);
  public final static http_errors multiple_choices = new http_errors("multiple_choices", 300);
  public final static http_errors moved_permanently = new http_errors("moved_permanently", 301);
  public final static http_errors moved_temporarily = new http_errors("moved_temporarily", 302);
  public final static http_errors not_modified = new http_errors("not_modified", 304);
  public final static http_errors bad_request = new http_errors("bad_request", 400);
  public final static http_errors unauthorized = new http_errors("unauthorized", 401);
  public final static http_errors forbidden = new http_errors("forbidden", 403);
  public final static http_errors not_found = new http_errors("not_found", 404);
  public final static http_errors internal_server_error = new http_errors("internal_server_error", 500);
  public final static http_errors not_implemented = new http_errors("not_implemented", 501);
  public final static http_errors bad_gateway = new http_errors("bad_gateway", 502);
  public final static http_errors service_unavailable = new http_errors("service_unavailable", 503);

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static http_errors swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + http_errors.class + " with value " + swigValue);
  }

  private http_errors(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private http_errors(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private http_errors(String swigName, http_errors swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static http_errors[] swigValues = { cont, ok, created, accepted, no_content, multiple_choices, moved_permanently, moved_temporarily, not_modified, bad_request, unauthorized, forbidden, not_found, internal_server_error, not_implemented, bad_gateway, service_unavailable };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

