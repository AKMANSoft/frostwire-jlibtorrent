import option ;
import os ;

NDK_ROOT = [ os.environ NDK_ROOT ] ;
ECHO "NDK_ROOT = "$(NDK_ROOT) ;
if ! $(NDK_ROOT)
{
	EXIT "You need to define NDK_ROOT" ;
}

using gcc : android_arm : $(NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-g++ :
    <compileflags>--sysroot=$(NDK_ROOT)/platforms/android-15/arch-arm
    <compileflags>-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.9/include
    <compileflags>-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include
    <compileflags>-fpermissive
    <archiver>$(NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-ar
    <ranlib>$(NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-ranlib
    <cxxflags>-mthumb
    <cxxflags>-fno-strict-aliasing
    <cxxflags>-lstdc++
    <cxxflags>-O3
    <cxxflags>-march=armv7-a
    <cxxflags>-DNDEBUG
    <cxxflags>-D__GLIBC__
    <cxxflags>-D_GLIBCXX__PTHREADS
    <cxxflags>-D__arm__
    <cxxflags>-D_REENTRANT
    ;
 
option.set keep-going : false ;
